{"version":3,"sources":["height-observer.tsx","streamlit-disqus.tsx","index.tsx"],"names":["HeightObserver","children","fixedHeight","onChange","divRef","useRef","useEffect","document","body","scrollHeight","current","ro","ResizeObserver","entries","entry","find","target","contentRect","height","observe","disconnect","ref","withStreamlitConnection","args","Streamlit","setFrameHeight","shortname","config","url","undefined","identifier","title","categoryID","language","ReactDOM","render","StrictMode","getElementById"],"mappings":"yNA0CeA,EAjCQ,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,SAAUC,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,SACzCC,EAASC,iBAAuB,MAyBtC,OAvBAC,qBAAU,WAKR,GAHAH,EAASD,GAAeK,SAASC,KAAKC,eAGjCP,GAAeE,EAAOM,QAAS,CAGlC,IAAMC,EAAK,IAAIC,KAAe,SAAAC,GAC5B,IAAMC,EAAQD,EAAQE,MAAK,SAAAD,GAAK,OAAIA,EAAME,SAAWZ,EAAOM,WACxDI,GACFX,EAASW,EAAMG,YAAYC,WAQ/B,OAHAP,EAAGQ,QAAQf,EAAOM,SAGX,kBAAMC,EAAGS,iBAEjB,CAAClB,IAGF,yBAAKmB,IAAKjB,GACPH,ICdQqB,eAjBS,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KACzB,OACE,kBAAC,EAAD,CAAgBpB,SAAUqB,IAAUC,gBAClC,kBAAC,kBAAD,CACEC,UAAWH,EAAKG,UAChBC,OAAQ,CACNC,IAAKL,EAAKK,UAAOC,EACjBC,WAAYP,EAAKO,iBAAcD,EAC/BE,MAAOR,EAAKQ,YAASF,EACrBG,WAAYT,EAAKS,iBAAcH,EAC/BI,SAAUV,EAAKU,eAAYJ,SCZrCK,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7B,SAAS8B,eAAe,W","file":"static/js/main.24565fd4.chunk.js","sourcesContent":["import ResizeObserver from \"resize-observer-polyfill\"\nimport React, { useEffect, useRef } from \"react\"\n\ninterface HeightObserverProps {\n  children?: any\n  fixedHeight?: number\n  onChange: (height: number) => void\n}\n\nconst HeightObserver = ({ children, fixedHeight, onChange }: HeightObserverProps) => {\n  const divRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    // Initialize height\n    onChange(fixedHeight || document.body.scrollHeight)\n\n    // Change height dynamically if fixedHeight is not set\n    if (!fixedHeight && divRef.current) {\n\n      // Call onChange with new height as parameter\n      const ro = new ResizeObserver(entries => {\n        const entry = entries.find(entry => entry.target === divRef.current)\n        if (entry) {\n          onChange(entry.contentRect.height)\n        }\n      })\n\n      // Start observing div height changes\n      ro.observe(divRef.current)\n\n      // Unobserve div on unmount\n      return () => ro.disconnect()\n    }\n  }, [fixedHeight])\n\n  return (\n    <div ref={divRef}>\n      {children}\n    </div>\n  )\n}\n\nexport default HeightObserver\n","import React from \"react\"\nimport { ComponentProps, Streamlit, withStreamlitConnection } from \"streamlit-component-lib\"\nimport { DiscussionEmbed } from \"disqus-react\"\n\nimport HeightObserver from \"./height-observer\"\n\nconst StreamlitPlayer = ({ args }: ComponentProps) => {\n  return (\n    <HeightObserver onChange={Streamlit.setFrameHeight}>\n      <DiscussionEmbed\n        shortname={args.shortname}\n        config={{\n          url: args.url || undefined,\n          identifier: args.identifier || undefined,\n          title: args.title || undefined,\n          categoryID: args.categoryID || undefined,\n          language: args.language || undefined\n        }}\n      />\n    </HeightObserver>\n  )\n}\n\nexport default withStreamlitConnection(StreamlitPlayer)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitDisqus from \"./streamlit-disqus\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitDisqus />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}